#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend-api:server');
const http = require('http');
const mongoose = require('mongoose')
const ShareDB = require('sharedb')
const WebSocket = require('ws')
const WebSocketJSONStream = require('@teamwork/websocket-json-stream')

const db = require('sharedb-mongo')(process.env.MONGO_URL)
const backend = new ShareDB({db})
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8002');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
initialize()
startWebsocket()

server.listen(port)
server.on('listening',onListening)

/**
 * Listen on provided port, on all network interfaces once server connects to DB.
 */

const initialize = async() => {
  try{
    // According to docs mongoose returns a promise 
    await mongoose.connect(process.env.MONGO_URL, {useNewUrlParser: true, useUnifiedTopology: true})
  }catch (err){
    console.log(err)
  }

}

/**
 * Websocket Server to handle ShareDB subscription connections
 */
function startWebsocket(){
  const wss = new WebSocket.Server({server: server})
  wss.on('connection',function(ws){
    const stream = new WebSocketJSONStream(ws)
    backend.listen(stream)
  })
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = backend